## Onderstaand databestand met two-way FE country (importer en exporter) times product group
datamix3 <- read.dta("/Users/tomba/Dropbox/Thomas/papers/TradeMixture/Data/Distance_decay_SITC3_pxc_subsample70.dta")
attach(datamix3)
## Note: analyses based on random sample of 70% of total SITC3_pxc
View(datamix3)
plot(logdistw_tw, logvalue_tw)
View(datamix3)
View(datamix3)
reg <- lm(logvalue_tw~logdistw_tw +contig_tw +comlang_off_tw +colony_tw +commontrade_tw +cdist_tw +idist_tw, data=datamix3)
summary(reg)
plot(fitted(reg), resid(reg))
seg3 <- flexmix(logvalue_tw~logdistw_tw +contig_tw +comlang_off_tw +colony_tw +commontrade_tw +cdist_tw +idist_tw|sitc3, data=datamix3, k=5)
summary(seg3)
plot(seg3)
refit(seg3)
summary(refit(seg3))
matplot(logdistw, fitted(seg3), pch=16, type="p")
#points(logdistw, logvalue_tw)
table(group(seg3),clusters(seg3))
install.packages("fle")
install.packages("flexmix")
library("flexmix")
seg3 <- flexmix(logvalue_tw~logdistw_tw +contig_tw +comlang_off_tw +colony_tw +commontrade_tw +cdist_tw +idist_tw|sitc3, data=datamix3, k=5)
summary(seg3)
plot(seg3)
refit(seg3)
"no restore"
"no restore history"
?memory.limit
memory.limit(3500)
require("foreign")
require("grid")
require("modeltools")
require("multcomp")
require("mvtnorm")
require("flexmix")
require("boot")
require("bootstrap")
#######################################################
# first checks to start with a clean workspace
#######################################################
ls()
rm(datamix2, seg2)
#######################################################
# attach the data prepared by STATA
#######################################################
## Onderstaand databestand met two-way FE country (importer en exporter) times product group
datamix3 <- read.dta("/Users/tomba/Dropbox/Thomas/papers/TradeMixture/Data/Distance_decay_SITC3_pxc_subsample70.dta")
attach(datamix3)
## Note: analyses based on random sample of 70% of total SITC3_pxc
plot(logdistw_tw, logvalue_tw)
#######################################################
# Do the first regression
#######################################################
reg <- lm(logvalue_tw~logdistw_tw +contig_tw +comlang_off_tw +colony_tw +commontrade_tw +cdist_tw +idist_tw, data=datamix3)
summary(reg)
plot(fitted(reg), resid(reg))
#######################################################
# Do first segmentation with number of clusters = x, with sitc3 as grouping variable
#######################################################
## Two-way fixed effects
## using stepflex to run flexmix repeatedly for different number of components
rm(x)
x <- stepFlexmix(logvalue_tw~logdistw_tw|sitc3, data=datamix3, k=5:12, nrep=5)
BIC(x)
getModel(x, which="BIC")
summary(getModel(x, "BIC"))
matplot(logdistw_tw, fitted(getModel(x, "BIC")), pch=21:25, type="p", bg=2:8, cex=0.7, xlab="logdist", ylab="fitted values")
print(plot(getModel(x, "AIC"), mark=5, col="grey", markcol=6))
table(group(getModel(x, "AIC")),clusters(getModel(x, "AIC")))
summary(refit(getModel(x, "AIC")))
example(flexmix)
require("flexmix")
example(flexmix)
install.packages("flexmix")
library("flexmix", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("caTools")
library(caTools)         # external package providing write.gif function
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F",
"yellow", "#FF7F00", "red", "#7F0000"))
m <- 1200                # define size
C <- complex( real=rep(seq(-1.8,0.6, length.out=m), each=m ),
imag=rep(seq(-1.2,1.2, length.out=m), m ) )
C <- matrix(C,m,m)       # reshape as square matrix of complex numbers
Z <- 0                   # initialize Z to zero
X <- array(0, c(m,m,20)) # initialize output 3D array
for (k in 1:20) {        # loop with 20 iterations
Z <- Z^2+C             # the central difference equation
X[,,k] <- exp(-abs(Z)) # capture results
}
write.gif(X, "Mandelbrot.gif", col=jet.colors, delay=1000)
SServEff <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/SservEff.csv",head=TRUE,sep=",")
View(SServEff)
install.packages("reshape")
library("reshape", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
SservEff <- melt(SServEff, id=c("Region","Sector"))
View(SservEff)
rename(SServEff , c("X2000"="2000", "X2001"="2001", "X2002"="2002", "X2003"="2003", "X2004"="2004", "X2005"="2005", "X2006"="2006", "X2007"="2007", "X2008"="2008", "X2009"="2009", "X2010"="201000"))
rename(SServEff , c("X2000"="2000", "X2001"="2001", "X2002"="2002", "X2003"="2003", "X2004"="2004", "X2005"="2005", "X2006"="2006", "X2007"="2007", "X2008"="2008", "X2009"="2009", "X2010"="2010"))
View(SservEff)
View(SServEff)
View(SservEff)
SServEff <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/SservEff.csv",head=TRUE,sep=",")
rename(SServEff , c("X2000"="2000", "X2001"="2001", "X2002"="2002", "X2003"="2003", "X2004"="2004", "X2005"="2005", "X2006"="2006", "X2007"="2007", "X2008"="2008", "X2009"="2009", "X2010"="2010"))
SservEff <- melt(SServEff, id=c("Region","Sector"))
View(SservEff)
SServEff <- rename(SServEff , c("X2000"="2000", "X2001"="2001", "X2002"="2002", "X2003"="2003", "X2004"="2004", "X2005"="2005", "X2006"="2006", "X2007"="2007", "X2008"="2008", "X2009"="2009", "X2010"="2010"))
View(SservEff)
View(SservEff)
View(SServEff)
SservEff <- melt(SServEff, id=c("Region","Sector"))
View(SservEff)
SServEff <- rename(SServEff , c("variable" ="Year", "value" = "Efficiency" ))
View(SservEff)
SservEff <- melt(SServEff, id=c("Region","Sector"))
SServEff <- rename(SServEff , c("variable" ="Year", "value" = "Efficiency" ))
View(SservEff)
SServEff <- rename(SServEff , c("variable" ="Year", "value" = "Efficiency" ))
View(SservEff)
SServEff <- rename(SServEff , c("variable" ="Year", "value"="Efficiency"))
View(SservEff)
View(SservEff)
View(SservEff)
SServEff <- rename(SServEff , c("variable" ="Year", "value"="Efficiency"))
View(SServEff)
View(SservEff)
SServEff <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/SservEff.csv",head=TRUE,sep=",")
SServEff <- rename(SServEff , c("X2000"="2000", "X2001"="2001", "X2002"="2002", "X2003"="2003", "X2004"="2004", "X2005"="2005", "X2006"="2006", "X2007"="2007", "X2008"="2008", "X2009"="2009", "X2010"="2010"))
SservEff <- melt(SServEff, id=c("Region","Sector"))
SServEff1 <- rename(SServEff , c("variable" ="Year", "value"="Efficiency"))
View(SServEff1)
View(SServEff1)
SServEff <- rename(SServEff , c("variable" ="Year", "value"="Efficiency"))
SServEff <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/SservEff.csv",head=TRUE,sep=",")
SServEff <- rename(SServEff , c("X2000"="2000", "X2001"="2001", "X2002"="2002", "X2003"="2003", "X2004"="2004", "X2005"="2005", "X2006"="2006", "X2007"="2007", "X2008"="2008", "X2009"="2009", "X2010"="2010"))
SServEff <- melt(SServEff, id=c("Region","Sector"))
SServEff <- rename(SServEff, c("variable" ="Year", "value"="Efficiency"))
View(SServEff)
Factors <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/Factors.csv",head=TRUE,sep=",")
View(Factors)
View(SServEff)
View(Factors)
Data <- merge(SServEff,Factors,by="Region")
View(Data)
SServEff <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/SservEff.csv",head=TRUE,sep=",")
SServEff <- rename(SServEff , c("X2000"="2000", "X2001"="2001", "X2002"="2002", "X2003"="2003", "X2004"="2004", "X2005"="2005", "X2006"="2006", "X2007"="2007", "X2008"="2008", "X2009"="2009", "X2010"="2010"))
SServEff <- melt(SServEff, id=c("Region","Sector"))
SServEff <- rename(SServEff, c("variable" ="Year", "value"="Inefficiency"))
attach(Efficiency <- 1/Inefficiency)
Factors <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/Factors.csv",head=TRUE,sep=",")
Data <- merge(SServEff,Factors,by="Region")
View(Data)
SServEff <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/SservEff.csv",head=TRUE,sep=",")
SServEff <- rename(SServEff , c("X2000"="2000", "X2001"="2001", "X2002"="2002", "X2003"="2003", "X2004"="2004", "X2005"="2005", "X2006"="2006", "X2007"="2007", "X2008"="2008", "X2009"="2009", "X2010"="2010"))
SServEff <- melt(SServEff, id=c("Region","Sector"))
SServEff <- rename(SServEff, c("variable" ="Year", "value"="Inefficiency"))
attach(Efficiency <- 1/SServEff$Inefficiency)
Factors <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/Factors.csv",head=TRUE,sep=",")
Data <- merge(SServEff,Factors,by="Region")
SServEff <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/SservEff.csv",head=TRUE,sep=",")
SServEff <- rename(SServEff , c("X2000"="2000", "X2001"="2001", "X2002"="2002", "X2003"="2003", "X2004"="2004", "X2005"="2005", "X2006"="2006", "X2007"="2007", "X2008"="2008", "X2009"="2009", "X2010"="2010"))
SServEff <- melt(SServEff, id=c("Region","Sector"))
SServEff <- rename(SServEff, c("variable" ="Year", "value"="Inefficiency"))
SServEff$Efficiency <- 1/SServEff$Inefficiency)
Factors <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/Factors.csv",head=TRUE,sep=",")
Data <- merge(SServEff,Factors,by="Region")
SServEff <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/SservEff.csv",head=TRUE,sep=",")
SServEff <- rename(SServEff , c("X2000"="2000", "X2001"="2001", "X2002"="2002", "X2003"="2003", "X2004"="2004", "X2005"="2005", "X2006"="2006", "X2007"="2007", "X2008"="2008", "X2009"="2009", "X2010"="2010"))
SServEff <- melt(SServEff, id=c("Region","Sector"))
SServEff <- rename(SServEff, c("variable" ="Year", "value"="Inefficiency"))
SServEff$Efficiency <- 1/SServEff$Inefficiency
Factors <- read.csv(file="./Dropbox/Thomas/project/RiE/Work/Data/Derived/Factors.csv",head=TRUE,sep=",")
Data <- merge(SServEff,Factors,by="Region")
View(SServEff)
View(Data)
View(Data)
reg1 <- lm(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6)
summary(reg1)
reg1 <- lm(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6, data = Data)
summary(reg1)
cl(Data, reg1, Data$Region)
cl   <- function(dat,fm, cluster){
require(sandwich, quietly = TRUE)
require(lmtest, quietly = TRUE)
M <- length(unique(cluster))
N <- length(cluster)
K <- fm$rank
dfc <- (M/(M-1))*((N-1)/(N-K))
uj  <- apply(estfun(fm),2, function(x) tapply(x, cluster, sum));
vcovCL <- dfc*sandwich(fm, meat=crossprod(uj)/N)
coeftest(fm, vcovCL) }
cl(Data, reg1, Data$Region)
install.packages("sandwich")
install.packages("lmtest")
library("lmtest", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("sandwich", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
cl   <- function(dat,fm, cluster){
require(sandwich, quietly = TRUE)
require(lmtest, quietly = TRUE)
M <- length(unique(cluster))
N <- length(cluster)
K <- fm$rank
dfc <- (M/(M-1))*((N-1)/(N-K))
uj  <- apply(estfun(fm),2, function(x) tapply(x, cluster, sum));
vcovCL <- dfc*sandwich(fm, meat=crossprod(uj)/N)
coeftest(fm, vcovCL) }
cl(Data, reg1, Data$Region)
reg1 <- lm(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6, data = Data)
summary(reg1)
cl(Data, reg1, Data$Region)
fficiency~PC1+PC2+PC3+PC4+PC5+PC6, model = Model, nrep=1, k = 2, data = Data)
fittedModel <- stepFlexmix(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6, model = Model, nrep=1, k = 2, data = Data)
fittedModel <- stepFlexmix(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6, nrep=1, k = 2, data = Data)
plot(fittedModel)
fittedModel <- stepFlexmix(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6|Region, nrep=1, k = 2, data = Data)
plot(fittedModel)
fittedModel <- stepFlexmix(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6|Region, nrep=3, k =6, data = Data)
summary(refit(fittedModel))
plot(fittedModel)
summary(fittedModel)
Classes <- group(fittedModel)
Classes <- clusters(fittedModel)
View(Data)
table(Data$class, clusters(fittedModel))
table(Classes)
DataClasses <- clusters(fittedModel, data=DataClasses)
table(group(fittedModel),clusters(fittedModel))
fittedModel <- stepFlexmix(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6|Region, nrep=3, k =2:8, data = Data)
summary(fittedModel)
summary(refit(fittedModel), mstep)
plot(fittedModel)
table(group(fittedModel),clusters(fittedModel))
summary(fittedModel)
summary(refit(fittedModel), method = 'mstep')
summary(refit(fittedModel), method = mstep)
summary(refit(fittedModel, mstep))
summary(refit(fittedModel, method=mstep))
summary(refit(fittedModel, method="mstep"))
summary(refit(fittedModel)
plot(fittedModel)
fittedModel <- stepFlexmix(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6|Region, nrep=3, k =2, data = Data)
summary(fittedModel)
summary(refit(fittedModel, method=mstep)
summary(refit(fittedModel, method=mstep))
fittedModel <- stepFlexmix(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6|Region, nrep=3, k =2, data = Data)
summary(fittedModel)
summary(refit(fittedModel, method=mstep))
summary(refit(fittedModel, method="mstep"))
fittedModel <- stepFlexmix(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6|Region, nrep=3, k =2:12, data = Data)
summary(fittedModel)
summary(refit(fittedModel, method="mstep"))
plot(fittedModel)
table(group(fittedModel),clusters(fittedModel))
getModel(fittedModel, which = "BIC")
summary(fittedModel)
summary(refit(fittedModel, method="mstep"))
plot(fittedModel)
table(group(fittedModel),clusters(fittedModel))
fittedModel<-getModel(fittedModel, which = "BIC")
summary(fittedModel)
summary(refit(fittedModel, method="mstep"))
plot(fittedModel)
table(group(fittedModel),clusters(fittedModel))
fittedModel <- stepFlexmix(Efficiency~PC1+PC2+PC3+PC4+PC5+PC6|Region, nrep=3, k =2:12, data = Data)
fittedModel<-getModel(fittedModel, which = "BIC")
summary(fittedModel)
summary(refit(fittedModel, method="mstep"))
plot(fittedModel)
table(group(fittedModel),clusters(fittedModel))
install.packages("stargazer")
library("stargazer", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
stargazer(fittedModel)
reg2<-summary(fittedModel)
stargazer(reg1, reg2)
stargazer(reg1)
re2<-cl(Data, reg1, Data$Region)
stargazer(reg1,reg2)
reg2<-cl(Data, reg1, Data$Region)
stargazer(reg1,reg2)
stargazer(reg1,reg2, align)
stargazer(reg1,reg2, align=TRUE)
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar = 2, norf =NA)
vect
names()
names(vect)
vect <- c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- seq(1:20)
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix < - myVector
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20, 4,5)
identical(myMatrix, myMatrix2)
patient <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, myData)
colnames(myData, cnames)
?colnames
colnames(myData) <- cnames
myData
x <- loadmat(hw1_data.csv)
dat = read.csv("/Users/tomba/Dropbox/Thomas/programs/R/Rprogramming/hw1_data.csv", header = TRUE)
head(dat)
dat[1:2,]
dim(dat)
dat[152:153,]
day[47,]
dat[47,]
sum(is.na(dat))
sum(is.na(dat[,1]))
mean(dat[,"Ozone"])
mean(dat[,"Ozone"], na.rm=TRUE)
dat1 <- dat("Ozone>=31" & "Temp" >=90)
dat1 <- dat["Ozone>=31" & "Temp" >=90,]
dat1 <- dat["Ozone>31" & "Temp" >90,]
dat1 <- dat[which("Ozone>31" & "Temp" >90),]
dat1 <- dat[which("dat$Ozone>31" & "dat$Temp" >90),]
dat1 <- dat[which(dat$Ozone>31 & dat$Temp >90),]
mean(dat1[2,])
mean(dat1[,2])
sum1
dat1
mean(dat$temp)
?mean
dat2 <- dat[which(dat$month==6),]
dat2
dat3 <- dat[which(dat$month=6),]
dat
dat3 <- dat[which(dat$Month=6),]
dat3 <- dat[which(dat$Month==6),]
dat3
mean(dat$Temp)
mean(dat[,4])
dat4 <- dat1[which(dat$Month==6),]
dat4
dat1
rm(dat2, dat4)
dat3
dat4 <- dat1[which(dat$Month==5),]
dat4
rm(dat4)
dat4 <- dat1[which(dat$Month==5),]
rm(dat4)
dat4 <- dat[which(dat$Month==5),]
dat4
max(dat4)
?max
max(dat[,1], is.na=TRUE)
max(dat[,1], na.rm=TRUE)
max(dat4[,1], na.rm=TRUE)
x <- 1:10
if(x > 5) {
x <- 0
}
x< -10
if(x > 5) {
+     x <- 0
+ }
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f93)
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Dropbox/Thomas/programs/R/Rprogramming/complete.R')
cube <- function(x, n) {
x^3
}
cube(3)
a = cube(3)
a
library(httr)
install.packages("httr")
library(httr)
install.packages("httpuv")
install.packages("httr")
library(httr)
install.packages("httr")
library(httr)
install.packages("httpuv")
library(httpuv)
install.packages("jsonlite")
install.packages("httr")
install.packages("flexmix")
library(httr)
install.packages("httr")
library(httr)
install.packages("httpuv")
library(httpuv)
install.packages("jsonlite")
install.packages("httr")
oauth_endpoints("github")
myapp <- oauth_app("github", "01903b416eced144ddc9", secret="655f2cfacf7a78736a6cff1feb385bfbbda0674e")
library(httr)
install.packages("httr")
library(httr)
install.packages("httpuv")
library(httpuv)
install.packages("jsonlite")
library(jsonlite)
install.packages("httr")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
oauth_endpoints("github")
myapp <- oauth_app("github", "01903b416eced144ddc9", secret="655f2cfacf7a78736a6cff1feb385bfbbda0674e")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
oauth_endpoints("github")
myapp <- oauth_app("github", "01903b416eced144ddc9", secret="655f2cfacf7a78736a6cff1feb385bfbbda0674e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
data<-jsonlite::fromJSON(toJSON(req))
data<-jsonlite::fromJSON(toJSON(req, simplify=FALSE))
data<-jsonlite::fromJSON(toJSON(req, simplifyVector=FALSE))
req <- GET("https://api.github.com/home.timeline.json", config(token = github_token))
json1 <- content(req)
json1
rate_limit
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
content(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1:4]
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1:4]
req(datasharing)
View(json2)
data <- json2[json2 == "datasharing"]
View(json2)
install.packages("RMySQL")
install.packages("SQL")
install.packages("devtools")
install_github("slidify","ramnathv")
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
install.packages(c("MASS", "statmod", "swirl", "VGAM"))
install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
framework   : revealjs
slidify("index.Rmd")
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
slidify("index.Rmd")
library(slidify)
source('~/.active-rstudio-document', echo=TRUE)
output: beamer_presentation
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("rmarkdown")
>
